/* tslint:disable */
/* eslint-disable */
/**
 * Preferences API
 * API for config server
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Entry
 */
export interface Entry {
    /**
     * 
     * @type {string}
     * @memberof Entry
     */
    key: string;
    /**
     * 
     * @type {any}
     * @memberof Entry
     */
    value?: any | null;
}
/**
 * 
 * @export
 * @interface GlobalEntryPydanticWithOverride
 */
export interface GlobalEntryPydanticWithOverride {
    /**
     * 
     * @type {string}
     * @memberof GlobalEntryPydanticWithOverride
     */
    key: string;
    /**
     * 
     * @type {any}
     * @memberof GlobalEntryPydanticWithOverride
     */
    value?: any | null;
    /**
     * 
     * @type {boolean}
     * @memberof GlobalEntryPydanticWithOverride
     */
    overrideFull?: boolean;
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    detail?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface UserEntryBatchGet
 */
export interface UserEntryBatchGet {
    /**
     * 
     * @type {string}
     * @memberof UserEntryBatchGet
     */
    key: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof UserEntryBatchGet
     */
    userIds: Array<number>;
}
/**
 * 
 * @export
 * @interface UserEntryPydantic
 */
export interface UserEntryPydantic {
    /**
     * 
     * @type {string}
     * @memberof UserEntryPydantic
     */
    key: string;
    /**
     * 
     * @type {any}
     * @memberof UserEntryPydantic
     */
    value?: any | null;
    /**
     * 
     * @type {number}
     * @memberof UserEntryPydantic
     */
    userId: number;
}
/**
 * 
 * @export
 * @interface UserEntryPydanticWithOverride
 */
export interface UserEntryPydanticWithOverride {
    /**
     * 
     * @type {string}
     * @memberof UserEntryPydanticWithOverride
     */
    key: string;
    /**
     * 
     * @type {any}
     * @memberof UserEntryPydanticWithOverride
     */
    value?: any | null;
    /**
     * 
     * @type {number}
     * @memberof UserEntryPydanticWithOverride
     */
    userId: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserEntryPydanticWithOverride
     */
    overrideFull?: boolean;
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<string>}
     * @memberof ValidationError
     */
    loc: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    msg: string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    type: string;
}

/**
 * PreferencesApi - axios parameter creator
 * @export
 */
export const PreferencesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Deletes global config preferences associated with provided key
         * @summary Del Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesDelGlobalPref: async (key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling apiV1PreferencesDelGlobalPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Del User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesDelUserPref: async (key: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling apiV1PreferencesDelUserPref.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1PreferencesDelUserPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get global config preference associated with provided key.
         * @summary Get Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetGlobalPref: async (key: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling apiV1PreferencesGetGlobalPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetUserPref: async (key: string, userId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'key' is not null or undefined
            if (key === null || key === undefined) {
                throw new RequiredError('key','Required parameter key was null or undefined when calling apiV1PreferencesGetUserPref.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling apiV1PreferencesGetUserPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (key !== undefined) {
                localVarQueryParameter['key'] = key;
            }

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref Batch
         * @param {UserEntryBatchGet} userEntryBatchGet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetUserPrefBatch: async (userEntryBatchGet: UserEntryBatchGet, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEntryBatchGet' is not null or undefined
            if (userEntryBatchGet === null || userEntryBatchGet === undefined) {
                throw new RequiredError('userEntryBatchGet','Required parameter userEntryBatchGet was null or undefined when calling apiV1PreferencesGetUserPrefBatch.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/batchuser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userEntryBatchGet !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userEntryBatchGet !== undefined ? userEntryBatchGet : {}) : (userEntryBatchGet || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores global preferance in global config database
         * @summary Set Global Pref
         * @param {GlobalEntryPydanticWithOverride} globalEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesSetGlobalPref: async (globalEntryPydanticWithOverride: GlobalEntryPydanticWithOverride, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'globalEntryPydanticWithOverride' is not null or undefined
            if (globalEntryPydanticWithOverride === null || globalEntryPydanticWithOverride === undefined) {
                throw new RequiredError('globalEntryPydanticWithOverride','Required parameter globalEntryPydanticWithOverride was null or undefined when calling apiV1PreferencesSetGlobalPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/global`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof globalEntryPydanticWithOverride !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(globalEntryPydanticWithOverride !== undefined ? globalEntryPydanticWithOverride : {}) : (globalEntryPydanticWithOverride || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Stores user preferance in user config database  User want to write to VACATIONREQUEST on user_id=3 1. User have to have privilege userprefs_user_writeself_VACATIONREQUEST and has to be logged as user_id=3 2. User have to have privilege userprefs_user_write_VACATIONREQUEST_ROLEX and user_id=3 must be in role ROLEX
         * @summary Set User Pref
         * @param {UserEntryPydanticWithOverride} userEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesSetUserPref: async (userEntryPydanticWithOverride: UserEntryPydanticWithOverride, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'userEntryPydanticWithOverride' is not null or undefined
            if (userEntryPydanticWithOverride === null || userEntryPydanticWithOverride === undefined) {
                throw new RequiredError('userEntryPydanticWithOverride','Required parameter userEntryPydanticWithOverride was null or undefined when calling apiV1PreferencesSetUserPref.');
            }
            const localVarPath = `/userprefs/api/v1/preferences/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("OAuth2PasswordBearer", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof userEntryPydanticWithOverride !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(userEntryPydanticWithOverride !== undefined ? userEntryPydanticWithOverride : {}) : (userEntryPydanticWithOverride || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PreferencesApi - functional programming interface
 * @export
 */
export const PreferencesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Deletes global config preferences associated with provided key
         * @summary Del Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesDelGlobalPref(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesDelGlobalPref(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Del User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesDelUserPref(key: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesDelUserPref(key, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get global config preference associated with provided key.
         * @summary Get Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesGetGlobalPref(key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Entry>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesGetGlobalPref(key, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesGetUserPref(key: string, userId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserEntryPydantic>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesGetUserPref(key, userId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref Batch
         * @param {UserEntryBatchGet} userEntryBatchGet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesGetUserPrefBatch(userEntryBatchGet: UserEntryBatchGet, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserEntryPydantic>>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesGetUserPrefBatch(userEntryBatchGet, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Stores global preferance in global config database
         * @summary Set Global Pref
         * @param {GlobalEntryPydanticWithOverride} globalEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride: GlobalEntryPydanticWithOverride, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Stores user preferance in user config database  User want to write to VACATIONREQUEST on user_id=3 1. User have to have privilege userprefs_user_writeself_VACATIONREQUEST and has to be logged as user_id=3 2. User have to have privilege userprefs_user_write_VACATIONREQUEST_ROLEX and user_id=3 must be in role ROLEX
         * @summary Set User Pref
         * @param {UserEntryPydanticWithOverride} userEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiV1PreferencesSetUserPref(userEntryPydanticWithOverride: UserEntryPydanticWithOverride, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await PreferencesApiAxiosParamCreator(configuration).apiV1PreferencesSetUserPref(userEntryPydanticWithOverride, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PreferencesApi - factory interface
 * @export
 */
export const PreferencesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Deletes global config preferences associated with provided key
         * @summary Del Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesDelGlobalPref(key: string, options?: any): AxiosPromise<any> {
            return PreferencesApiFp(configuration).apiV1PreferencesDelGlobalPref(key, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Del User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesDelUserPref(key: string, userId: number, options?: any): AxiosPromise<any> {
            return PreferencesApiFp(configuration).apiV1PreferencesDelUserPref(key, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get global config preference associated with provided key.
         * @summary Get Global Pref
         * @param {string} key 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetGlobalPref(key: string, options?: any): AxiosPromise<Entry> {
            return PreferencesApiFp(configuration).apiV1PreferencesGetGlobalPref(key, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref
         * @param {string} key 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetUserPref(key: string, userId: number, options?: any): AxiosPromise<UserEntryPydantic> {
            return PreferencesApiFp(configuration).apiV1PreferencesGetUserPref(key, userId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get user config preference associated with provided key.
         * @summary Get User Pref Batch
         * @param {UserEntryBatchGet} userEntryBatchGet 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesGetUserPrefBatch(userEntryBatchGet: UserEntryBatchGet, options?: any): AxiosPromise<Array<UserEntryPydantic>> {
            return PreferencesApiFp(configuration).apiV1PreferencesGetUserPrefBatch(userEntryBatchGet, options).then((request) => request(axios, basePath));
        },
        /**
         * Stores global preferance in global config database
         * @summary Set Global Pref
         * @param {GlobalEntryPydanticWithOverride} globalEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride: GlobalEntryPydanticWithOverride, options?: any): AxiosPromise<any> {
            return PreferencesApiFp(configuration).apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride, options).then((request) => request(axios, basePath));
        },
        /**
         * Stores user preferance in user config database  User want to write to VACATIONREQUEST on user_id=3 1. User have to have privilege userprefs_user_writeself_VACATIONREQUEST and has to be logged as user_id=3 2. User have to have privilege userprefs_user_write_VACATIONREQUEST_ROLEX and user_id=3 must be in role ROLEX
         * @summary Set User Pref
         * @param {UserEntryPydanticWithOverride} userEntryPydanticWithOverride 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiV1PreferencesSetUserPref(userEntryPydanticWithOverride: UserEntryPydanticWithOverride, options?: any): AxiosPromise<any> {
            return PreferencesApiFp(configuration).apiV1PreferencesSetUserPref(userEntryPydanticWithOverride, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PreferencesApi - object-oriented interface
 * @export
 * @class PreferencesApi
 * @extends {BaseAPI}
 */
export class PreferencesApi extends BaseAPI {
    /**
     * Deletes global config preferences associated with provided key
     * @summary Del Global Pref
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesDelGlobalPref(key: string, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesDelGlobalPref(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Del User Pref
     * @param {string} key 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesDelUserPref(key: string, userId: number, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesDelUserPref(key, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get global config preference associated with provided key.
     * @summary Get Global Pref
     * @param {string} key 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesGetGlobalPref(key: string, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesGetGlobalPref(key, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user config preference associated with provided key.
     * @summary Get User Pref
     * @param {string} key 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesGetUserPref(key: string, userId: number, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesGetUserPref(key, userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get user config preference associated with provided key.
     * @summary Get User Pref Batch
     * @param {UserEntryBatchGet} userEntryBatchGet 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesGetUserPrefBatch(userEntryBatchGet: UserEntryBatchGet, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesGetUserPrefBatch(userEntryBatchGet, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stores global preferance in global config database
     * @summary Set Global Pref
     * @param {GlobalEntryPydanticWithOverride} globalEntryPydanticWithOverride 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride: GlobalEntryPydanticWithOverride, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesSetGlobalPref(globalEntryPydanticWithOverride, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Stores user preferance in user config database  User want to write to VACATIONREQUEST on user_id=3 1. User have to have privilege userprefs_user_writeself_VACATIONREQUEST and has to be logged as user_id=3 2. User have to have privilege userprefs_user_write_VACATIONREQUEST_ROLEX and user_id=3 must be in role ROLEX
     * @summary Set User Pref
     * @param {UserEntryPydanticWithOverride} userEntryPydanticWithOverride 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PreferencesApi
     */
    public apiV1PreferencesSetUserPref(userEntryPydanticWithOverride: UserEntryPydanticWithOverride, options?: any) {
        return PreferencesApiFp(this.configuration).apiV1PreferencesSetUserPref(userEntryPydanticWithOverride, options).then((request) => request(this.axios, this.basePath));
    }
}


